tekton:
{{- if eq .Requirements.webhook "prow" }}
  enabled: true
{{- else if eq .Requirements.webhook "lighthouse" }}
  enabled: true
{{- else }}
  enabled: false
{{- end }}

# Use cert-manager 0.11 CRDs/APIs with Dex
dex:
  certs:
    newApi: true

mongo:
  rootPassword: {{ .Parameters.mongo.rootPassword }}
  username: root
  port: "27017"
  hostname: jenkins-x-mongodb.jx

sendGrid:
  apiKey: {{ .Parameters.sendGrid.apiKey }}

cms:
  jwtSigningKey: {{ .Parameters.strapi.jwtSigningKey}}

htpasswd: {{ .Parameters.adminUser.htpasswd}}

apiGateway:
  username: {{ .Parameters.apiGateway.username }}
  password: {{ .Parameters.apiGateway.password }}

pactBroker:
  username: {{ .Parameters.pactBroker.username }}
  password: {{ .Parameters.pactBroker.password }}

elasticsearch:
  esJavaOpts: -Xmx1g -Xms1g
  replicas: 1
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 25Gi
  resources:
    requests:
      cpu: 1
      memory: 1Gi
    limits:
      cpu: 1
      memory: 1Gi
kibana:
  resources:
    requests:
      cpu: 500m
      memory: 256M
    limits:
      cpu: 500m
      memory: 256M
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
    path: /
    hosts:
      - kibana.simonjamesrowe.com
    tls:
      - secretName: tls-simonjamesrowe-com-p
        hosts:
         - kibana.simonjamesrowe.com
cp-helm-charts:
  ## ------------------------------------------------------
  ## Zookeeper
  ## ------------------------------------------------------
  cp-zookeeper:
    enabled: true
    servers: 1
    heapOptions: "-Xms128M -Xmx128M"
    persistence:
      enabled: true
      dataDirSize: 5Gi
      dataLogDirSize: 5Gi
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  cp-kafka:
    enabled: true
    brokers: 1
    configurationOverrides:
      "offsets.topic.replication.factor": "1"
      "default.replication.factor": 1
      "auto.create.topics.enable": true
    heapOptions: "-Xms256M -Xmx256M"
    persistence:
      enabled: true
      size: 5Gi
      disksPerBroker: 1
    resources:
      limits:
        cpu: 200m
        memory: 256Mi
      requests:
        cpu: 200m
        memory: 256Mi
    securityContext:
      runAsUser: 0

  cp-schema-registry:
    enabled: false
    replicaCount: 0

  cp-kafka-rest:
    enabled: false
    replicaCount: 0

  cp-kafka-connect:
    enabled: false
    replicaCount: 0

  cp-ksql-server:
    enabled: false
    replicaCount: 0

  cp-control-center:
    enabled: false
    replicaCount: 0

gradle:
  initScript: |-
    allprojects {

        apply plugin: 'maven-publish'

        repositories {
            maven {
                url "http://nexus/repository/maven-group/"
            }
            mavenCentral()
        }

      publishing {
            repositories {
                maven {
                    def releasesRepoUrl = "http://nexus/repository/maven-releases/"
                    def snapshotsRepoUrl = "http://nexus/repository/maven-snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username "{{ .Parameters.adminUser.username }}"
                        password "{{ .Parameters.adminUser.password }}"
                    }
                }
            }
        }

       configurations.all {
          resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
          resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
       }
    }

  properties: |-
    sonar.host.url=http://jenkins-x-sonarqube.jx:9000
    sonar.login={{ .Parameters.sonarqube.apiKey }}
    org.gradle.jvmargs=-Xmx1g -Xms1g

octant:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/auth-url: "https://$host/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: "https://$host/oauth2/start?rd=$escaped_request_uri"
    hosts:
      - host: octant.simonjamesrowe.com
        paths:
          - /
    tls:
      - hosts:
          - octant.simonjamesrowe.com
        secretName: tls-simonjamesrowe-com-p

postgresql:
  enabled: false
  postgresqlUsername: postgresql
  existingSecret: postgres-application-secrets
  postgresqlDatabase: jx
  persistence:
    size: 10Gi

pact-broker:
  ingress:
    domain: "simonjamesrowe.com"
    externalDNS: false
    namespaceSubDomain: "."
    tls:
      enabled: true
      production: true
    annotations:
      kubernetes.io/ingress.class: nginx

keycloak:
  postgresql:
    enabled: false
  ingress:
    enabled: true
    rules:
      - host: auth.simonjamesrowe.com
        paths:
          - /
    tls:
      - hosts:
          - auth.simonjamesrowe.com
        secretName: tls-simonjamesrowe-com-p

  extraEnv: |
    - name: DB_VENDOR
      value: postgres
    - name: DB_ADDR
      value: jenkins-x-postgresql
    - name: DB_PORT
      value: "5432"
    - name: DB_DATABASE
      value: jx
    - name: PROXY_ADDRESS_FORWARDING
      value: "true"

  extraEnvFrom: |
    - secretRef:
        name: 'jenkins-x-keycloak-db'

  secrets:
    db:
      stringData:
        DB_USER: 'postgresql'
        DB_PASSWORD: '{{ .Parameters.mongo.rootPassword }}'
        KEYCLOAK_USER: 'admin'
        KEYCLOAK_PASSWORD: '{{ .Parameters.mongo.rootPassword }}'

apm-server:
  image: docker.elastic.co/apm/apm-server-oss
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    path: /
    hosts:
      - apm.simonjamesrowe.com
    tls:
      - secretName: tls-simonjamesrowe-com-p
        hosts:
          - apm.simonjamesrowe.com
  apmConfig:
    apm-server.yml: |
      apm-server:
        host: "0.0.0.0:8200"
        rum:
          enabled: true
          event_rate:
            limit: 300
            lru_size: 1000
          allow_origins:
            - '*'
          allow_headers:
            - '*'
          library_pattern: "node_modules|bower_components|~"
          exclude_from_grouping: "^/webpack"
          source_mapping:
            enabled: true
            cache:
              expiration: 5m
            index_pattern: "apm-*-sourcemap*"
      queue: {}
      output.file:
        enabled: false
      output.elasticsearch:
        hosts: ["http://elasticsearch-master:9200"]
        index: "apm-oss-%{[observer.version]}-%{+yyyy.MM.dd}"
      setup.template.name: "apm-server"
      setup.template.pattern: "apm-oss-*"

sonarqube:
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: nginx
    hosts:
      - name: sonarqube.simonjamesrowe.com
        path: /
    tls:
      - secretName: tls-simonjamesrowe-com-p
        hosts:
          - sonarqube.simonjamesrowe.com
  postgresql:
    enabled: false
    postgresqlServer: jenkins-x-postgresql
    postgresqlUsername: postgresql
    postgresqlPassword: '{{ .Parameters.mongo.rootPassword }}'
    postgresqlDatabase: sonarqube
  account:
    adminPassword: '{{ .Parameters.adminUser.password }}'
    currentAdminPassword:  '{{ .Parameters.adminUser.password }}'
